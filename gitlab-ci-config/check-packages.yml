stages:
  - package
  - image

variables:
  # BUILDER_IMAGE_REGISTRY is incorrectly passed from parent pipeline due to
  # https://gitlab.com/gitlab-org/gitlab-runner/-/issues/29069. Hence we are
  # hardcoding the dev registry for SLES jobs.
  DEV_BUILDER_IMAGE_REGISTRY: 'dev.gitlab.org:5005/cookbooks/gitlab-omnibus-builder'

include:
  - local: '/gitlab-ci-config/dind-config.yml'

.distribution-amd64-tags:
  - distribution-runner
  - amd64

.distribution-arm64-tags:
  - distribution-runner
  - arm64

.distribution-armhf-tags:
  - distribution-runner
  - armhf

before_script:
  - bash scripts/ci/prepare_bundle.sh

.job_base:
  stage: package
  script:
    - bash scripts/ci/install_package.sh
    - bash scripts/ci/deploy_package.sh
  tags: !reference [.distribution-amd64-tags]
  retry: 2
  rules:
    - if: '$PIPELINE_TYPE == "INTERNAL_RELEASE_CHECK_PACKAGE_PIPELINE"'
      when: never
    - when: always

.apt-install:
  extends: .job_base
  variables:
    package_type: deb
    package_manager: apt

.yum-install:
  extends: .job_base
  variables:
    package_type: rpm
    package_manager: yum

.zypper-install:
  extends: .job_base
  variables:
    package_type: rpm
    package_manager: zypper

.apt-arm-install:
  extends: .apt-install
  tags: !reference [.distribution-arm64-tags]

.yum-arm-install:
  extends: .yum-install
  tags: !reference [.distribution-arm64-tags]

.zypper-arm-install:
  extends: .zypper-install
  tags: !reference [.distribution-arm64-tags]

# apt based
Ubuntu-20.04-check:
  image: "${BUILDER_IMAGE_REGISTRY}/ubuntu_20.04:latest"
  extends: .apt-install
  rules:
    - when: always
Ubuntu-20.04-arm64-check:
  image: "${BUILDER_IMAGE_REGISTRY}/ubuntu_20.04_arm64:latest"
  extends: .apt-arm-install
Ubuntu-22.04-check:
  image: "${BUILDER_IMAGE_REGISTRY}/ubuntu_22.04:latest"
  extends: .apt-install
  rules:
    - when: always
Ubuntu-22.04-arm64-check:
  image: "${BUILDER_IMAGE_REGISTRY}/ubuntu_22.04_arm64:latest"
  extends: .apt-arm-install
Ubuntu-24.04-check:
  image: "${BUILDER_IMAGE_REGISTRY}/ubuntu_24.04:latest"
  extends: .apt-install
  rules:
    - when: always
Ubuntu-24.04-arm64-check:
  image: "${BUILDER_IMAGE_REGISTRY}/ubuntu_24.04_arm64:latest"
  extends: .apt-arm-install
Debian-11-check:
  image: "${BUILDER_IMAGE_REGISTRY}/debian_11:latest"
  extends: .apt-install
Debian-11-arm64-check:
  image: "${BUILDER_IMAGE_REGISTRY}/debian_11_arm64:latest"
  extends: .apt-arm-install
Debian-12-check:
  image: "${BUILDER_IMAGE_REGISTRY}/debian_12:latest"
  extends: .apt-install
Debian-12-arm64-check:
  image: "${BUILDER_IMAGE_REGISTRY}/debian_12_arm64:latest"
  extends: .apt-arm-install
Raspberry-Pi-2-Bullseye-check:
  image: "${BUILDER_IMAGE_REGISTRY}/rpi_11:latest"
  extends: .apt-install
  rules:
    - if: '$DISABLE_RPI_BUILDS == "true"'
      when: never
    - if: '$PIPELINE_TYPE == "CE_CHECK_PACKAGE_AVAILABILITY_PIPELINE"'
  variables:
    package_repository: 'raspberry-pi2'
  tags: !reference [.distribution-armhf-tags]
Raspberry-Pi-2-Bookworm-check:
  image: "${BUILDER_IMAGE_REGISTRY}/rpi_12:latest"
  extends: .apt-install
  rules:
    - if: '$DISABLE_RPI_BUILDS == "true"'
      when: never
    - if: '$PIPELINE_TYPE == "CE_CHECK_PACKAGE_AVAILABILITY_PIPELINE"'
  variables:
    package_repository: 'raspberry-pi2'
  tags: !reference [.distribution-armhf-tags]
Ubuntu-20.04-fips-check:
  image: "${BUILDER_IMAGE_REGISTRY}/ubuntu_20.04_fips:latest"
  extends: .apt-install
  rules:
    - if: '$PIPELINE_TYPE == "EE_CHECK_PACKAGE_AVAILABILITY_PIPELINE"'
    - if: '$PIPELINE_TYPE == "INTERNAL_RELEASE_CHECK_PACKAGE_PIPELINE"'
  variables:
    USE_SYSTEM_SSL: "true"
    USE_SYSTEM_LIBGCRYPT: "true"
Ubuntu-22.04-fips-check:
  image: "${BUILDER_IMAGE_REGISTRY}/ubuntu_22.04_fips:latest"
  extends: .apt-install
  variables:
    USE_SYSTEM_SSL: "true"
    USE_SYSTEM_LIBGCRYPT: "true"

# yum based
AlmaLinux-8-check:
  image: "${BUILDER_IMAGE_REGISTRY}/almalinux_8:latest"
  extends: .yum-install
AlmaLinux-8-arm64-check:
  image: "${BUILDER_IMAGE_REGISTRY}/almalinux_8_arm64:latest"
  extends: .yum-arm-install
AlmaLinux-9-check:
  image: "${BUILDER_IMAGE_REGISTRY}/almalinux_9:latest"
  extends: .yum-install
AlmaLinux-9-arm64-check:
  image: "${BUILDER_IMAGE_REGISTRY}/almalinux_9_arm64:latest"
  extends: .yum-arm-install
AmazonLinux-2-check:
  image: "${BUILDER_IMAGE_REGISTRY}/amazonlinux_2:latest"
  extends: .yum-install
AmazonLinux-2-arm64-check:
  image: "${BUILDER_IMAGE_REGISTRY}/amazonlinux_2_arm64:latest"
  extends: .yum-arm-install
AmazonLinux-2023-check:
  image: "${BUILDER_IMAGE_REGISTRY}/amazonlinux_2023:latest"
  extends: .yum-install
AmazonLinux-2023-arm64-check:
  image: "${BUILDER_IMAGE_REGISTRY}/amazonlinux_2023_arm64:latest"
  extends: .yum-arm-install
AlmaLinux-8-fips-check:
  image: "${BUILDER_IMAGE_REGISTRY}/almalinux_8_fips:latest"
  extends: .yum-install
  rules:
    - if: '$PIPELINE_TYPE == "EE_CHECK_PACKAGE_AVAILABILITY_PIPELINE"'
  variables:
    USE_SYSTEM_SSL: "true"
    USE_SYSTEM_LIBGCRYPT: "true"
AlmaLinux-9-fips-check:
  image: "${BUILDER_IMAGE_REGISTRY}/almalinux_9_fips:latest"
  extends: .yum-install
  rules:
    - if: '$PIPELINE_TYPE == "EE_CHECK_PACKAGE_AVAILABILITY_PIPELINE"'
  variables:
    USE_SYSTEM_SSL: "true"
    USE_SYSTEM_LIBGCRYPT: "true"
AmazonLinux-2-fips-check:
  image: "${BUILDER_IMAGE_REGISTRY}/amazonlinux_2_fips:latest"
  extends: .yum-install
  rules:
    - if: '$PIPELINE_TYPE == "EE_CHECK_PACKAGE_AVAILABILITY_PIPELINE"'
  variables:
    USE_SYSTEM_SSL: "true"
    USE_SYSTEM_LIBGCRYPT: "false" # AL2 libgcrypt is not compatible with Omnibus gpgme/gnupg
AmazonLinux-2023-fips-check:
  image: "${BUILDER_IMAGE_REGISTRY}/amazonlinux_2023_fips:latest"
  extends: .yum-install
  rules:
    - if: '$PIPELINE_TYPE == "EE_CHECK_PACKAGE_AVAILABILITY_PIPELINE"'
  variables:
    USE_SYSTEM_SSL: "true"
    USE_SYSTEM_LIBGCRYPT: "true"


# zypper based
OpenSUSE-15.6-check:
  image: "${BUILDER_IMAGE_REGISTRY}/opensuse_15.6:latest"
  extends: .zypper-install
OpenSUSE-15.6-arm64-check:
  image: "${BUILDER_IMAGE_REGISTRY}/opensuse_15.6_arm64:latest"
  extends: .zypper-arm-install
SLES-12.5-check:
  image: "${DEV_BUILDER_IMAGE_REGISTRY}/sles_12sp5:latest"
  extends: .zypper-install
  rules:
    - if: '$PIPELINE_TYPE == "EE_CHECK_PACKAGE_AVAILABILITY_PIPELINE"'

Docker:
  stage: image
  needs: []
  extends: .dind
  image: "${BUILDER_IMAGE_REGISTRY}/distribution_ci_tools:latest"
  script:
    - bash scripts/ci/deploy_docker.sh
  tags: !reference [.distribution-amd64-tags]
  retry: 2
  rules:
    - if: '$PIPELINE_TYPE == "INTERNAL_RELEASE_CHECK_PACKAGE_PIPELINE"'
      when: never
    - when: always
